syntax = "proto3";

package envoy.extensions.filters.http.http_wasm.v3;

import "google/protobuf/wrappers.proto";

import "envoy/config/core/v3/base.proto";

import "google/protobuf/any.proto";

import "udpa/annotations/status.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.http.http_wasm.v3";
option java_outer_classname = "HttpWasmProto";
option java_multiple_files = true;
option go_package = "github.com/envoyproxy/go-control-plane/envoy/extensions/filters/http/http_wasm/v3";
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: HttpWasm]
// [#extension: envoy.filters.http.http_wasm]

// Configuration for Wasm Guest modules e.g. http filters.
// [#next-free-field: 7]
message GuestConfig {
  // A unique name for the guest configuration.
  string name = 1;

  // Filter/service configuration used to configure a guest
  // ``google.protobuf.Struct`` is serialized as JSON before
  // passing it to the guest. ``google.protobuf.BytesValue`` and
  // ``google.protobuf.StringValue`` are passed directly without the wrapper.
  google.protobuf.Any configuration = 2;

  // If there is a fatal error on the guest (e.g. exception, abort()), guest will either fail closed (by default),
  // e.g. by returning an HTTP 503 error,
  // or fail open (if 'fail_open' is set to true) by bypassing the filter.
  bool fail_open = 3;

  // Specifies environment variables to be injected to this guest which will be available through
  // WASI's ``environ_get`` and ``environ_get_sizes`` system calls. Note that these functions are mostly implicitly
  // called in your language's standard library, so you do not need to call them directly and you can access to env
  // vars just like when you do on native platforms.
  // Warning: Envoy rejects the configuration if there's conflict of key space.
  EnvironmentVariables environment_variables = 4;

  // The Wasm code that Envoy will execute.
  config.core.v3.AsyncDataSource code = 5;

  // The maximum request size that the filter will buffer before the connection
  // manager will stop buffering and return a 413 response.
  google.protobuf.UInt32Value max_request_bytes = 6
      [(validate.rules).uint32 = {gt: 0}, (validate.rules).message = {required: true}];
}

// [#next-free-field: 3]
message EnvironmentVariables {
  // The keys of *Envoy's* environment variables exposed to this . In other words, if a key exists in Envoy's environment
  // variables, then that key-value pair will be injected. Note that if a key does not exist, it will be ignored.
  repeated string host_env_keys = 1;

  // Explicitly given key-value pairs to be injected to this guest in the form of "KEY=VALUE".
  map<string, string> key_values = 2;
}
